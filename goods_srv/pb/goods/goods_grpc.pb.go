// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Goods_AddGoods_FullMethodName     = "/goods.goods/AddGoods"
	Goods_UpdateGoods_FullMethodName  = "/goods.goods/UpdateGoods"
	Goods_DelGoods_FullMethodName     = "/goods.goods/DelGoods"
	Goods_GetGoodsById_FullMethodName = "/goods.goods/GetGoodsById"
	Goods_SearchGoods_FullMethodName  = "/goods.goods/SearchGoods"
)

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsClient interface {
	// -----------------------goods-----------------------
	AddGoods(ctx context.Context, in *AddGoodsReq, opts ...grpc.CallOption) (*AddGoodsResp, error)
	UpdateGoods(ctx context.Context, in *UpdateGoodsReq, opts ...grpc.CallOption) (*UpdateGoodsResp, error)
	DelGoods(ctx context.Context, in *DelGoodsReq, opts ...grpc.CallOption) (*DelGoodsResp, error)
	GetGoodsById(ctx context.Context, in *GetGoodsByIdReq, opts ...grpc.CallOption) (*GetGoodsByIdResp, error)
	SearchGoods(ctx context.Context, in *SearchGoodsReq, opts ...grpc.CallOption) (*SearchGoodsResp, error)
}

type goodsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsClient(cc grpc.ClientConnInterface) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) AddGoods(ctx context.Context, in *AddGoodsReq, opts ...grpc.CallOption) (*AddGoodsResp, error) {
	out := new(AddGoodsResp)
	err := c.cc.Invoke(ctx, Goods_AddGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateGoods(ctx context.Context, in *UpdateGoodsReq, opts ...grpc.CallOption) (*UpdateGoodsResp, error) {
	out := new(UpdateGoodsResp)
	err := c.cc.Invoke(ctx, Goods_UpdateGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DelGoods(ctx context.Context, in *DelGoodsReq, opts ...grpc.CallOption) (*DelGoodsResp, error) {
	out := new(DelGoodsResp)
	err := c.cc.Invoke(ctx, Goods_DelGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsById(ctx context.Context, in *GetGoodsByIdReq, opts ...grpc.CallOption) (*GetGoodsByIdResp, error) {
	out := new(GetGoodsByIdResp)
	err := c.cc.Invoke(ctx, Goods_GetGoodsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) SearchGoods(ctx context.Context, in *SearchGoodsReq, opts ...grpc.CallOption) (*SearchGoodsResp, error) {
	out := new(SearchGoodsResp)
	err := c.cc.Invoke(ctx, Goods_SearchGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
// All implementations must embed UnimplementedGoodsServer
// for forward compatibility
type GoodsServer interface {
	// -----------------------goods-----------------------
	AddGoods(context.Context, *AddGoodsReq) (*AddGoodsResp, error)
	UpdateGoods(context.Context, *UpdateGoodsReq) (*UpdateGoodsResp, error)
	DelGoods(context.Context, *DelGoodsReq) (*DelGoodsResp, error)
	GetGoodsById(context.Context, *GetGoodsByIdReq) (*GetGoodsByIdResp, error)
	SearchGoods(context.Context, *SearchGoodsReq) (*SearchGoodsResp, error)
	mustEmbedUnimplementedGoodsServer()
}

// UnimplementedGoodsServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (UnimplementedGoodsServer) AddGoods(context.Context, *AddGoodsReq) (*AddGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoods not implemented")
}
func (UnimplementedGoodsServer) UpdateGoods(context.Context, *UpdateGoodsReq) (*UpdateGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoods not implemented")
}
func (UnimplementedGoodsServer) DelGoods(context.Context, *DelGoodsReq) (*DelGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGoods not implemented")
}
func (UnimplementedGoodsServer) GetGoodsById(context.Context, *GetGoodsByIdReq) (*GetGoodsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsById not implemented")
}
func (UnimplementedGoodsServer) SearchGoods(context.Context, *SearchGoodsReq) (*SearchGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGoods not implemented")
}
func (UnimplementedGoodsServer) mustEmbedUnimplementedGoodsServer() {}

// UnsafeGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServer will
// result in compilation errors.
type UnsafeGoodsServer interface {
	mustEmbedUnimplementedGoodsServer()
}

func RegisterGoodsServer(s grpc.ServiceRegistrar, srv GoodsServer) {
	s.RegisterService(&Goods_ServiceDesc, srv)
}

func _Goods_AddGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).AddGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_AddGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).AddGoods(ctx, req.(*AddGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_UpdateGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateGoods(ctx, req.(*UpdateGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DelGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DelGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_DelGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DelGoods(ctx, req.(*DelGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_GetGoodsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsById(ctx, req.(*GetGoodsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_SearchGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).SearchGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_SearchGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).SearchGoods(ctx, req.(*SearchGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Goods_ServiceDesc is the grpc.ServiceDesc for Goods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGoods",
			Handler:    _Goods_AddGoods_Handler,
		},
		{
			MethodName: "UpdateGoods",
			Handler:    _Goods_UpdateGoods_Handler,
		},
		{
			MethodName: "DelGoods",
			Handler:    _Goods_DelGoods_Handler,
		},
		{
			MethodName: "GetGoodsById",
			Handler:    _Goods_GetGoodsById_Handler,
		},
		{
			MethodName: "SearchGoods",
			Handler:    _Goods_SearchGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
