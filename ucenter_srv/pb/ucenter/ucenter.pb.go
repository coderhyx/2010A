// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: ucenter.proto

package ucenter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password     string      `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Captcha      *CaptchaReq `protobuf:"bytes,3,opt,name=captcha,proto3" json:"captcha,omitempty"`
	Phone        string      `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Promotion    string      `protobuf:"bytes,5,opt,name=promotion,proto3" json:"promotion,omitempty"`
	Code         string      `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Country      string      `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	SuperPartner string      `protobuf:"bytes,8,opt,name=superPartner,proto3" json:"superPartner,omitempty"`
	Ip           string      `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *RegReq) Reset() {
	*x = RegReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegReq) ProtoMessage() {}

func (x *RegReq) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegReq.ProtoReflect.Descriptor instead.
func (*RegReq) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{0}
}

func (x *RegReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegReq) GetCaptcha() *CaptchaReq {
	if x != nil {
		return x.Captcha
	}
	return nil
}

func (x *RegReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RegReq) GetPromotion() string {
	if x != nil {
		return x.Promotion
	}
	return ""
}

func (x *RegReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RegReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *RegReq) GetSuperPartner() string {
	if x != nil {
		return x.SuperPartner
	}
	return ""
}

func (x *RegReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CaptchaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CaptchaReq) Reset() {
	*x = CaptchaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptchaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptchaReq) ProtoMessage() {}

func (x *CaptchaReq) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptchaReq.ProtoReflect.Descriptor instead.
func (*CaptchaReq) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{1}
}

func (x *CaptchaReq) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *CaptchaReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RegRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegRes) Reset() {
	*x = RegRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegRes) ProtoMessage() {}

func (x *RegRes) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegRes.ProtoReflect.Descriptor instead.
func (*RegRes) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{2}
}

type NoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoRes) Reset() {
	*x = NoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoRes) ProtoMessage() {}

func (x *NoRes) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoRes.ProtoReflect.Descriptor instead.
func (*NoRes) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{3}
}

type CodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone   string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *CodeReq) Reset() {
	*x = CodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeReq) ProtoMessage() {}

func (x *CodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeReq.ProtoReflect.Descriptor instead.
func (*CodeReq) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{4}
}

func (x *CodeReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CodeReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type MemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId int64 `protobuf:"varint,3,opt,name=memberId,proto3" json:"memberId,omitempty"`
}

func (x *MemberReq) Reset() {
	*x = MemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberReq) ProtoMessage() {}

func (x *MemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberReq.ProtoReflect.Descriptor instead.
func (*MemberReq) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{5}
}

func (x *MemberReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

type MembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit    int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *MembersReq) Reset() {
	*x = MembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembersReq) ProtoMessage() {}

func (x *MembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembersReq.ProtoReflect.Descriptor instead.
func (*MembersReq) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{6}
}

func (x *MembersReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MembersReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MembersReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type MemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AliNo                      string  `protobuf:"bytes,2,opt,name=aliNo,proto3" json:"aliNo,omitempty"`
	QrCodeUrl                  string  `protobuf:"bytes,3,opt,name=qrCodeUrl,proto3" json:"qrCodeUrl,omitempty"`
	AppealSuccessTimes         int32   `protobuf:"varint,4,opt,name=appealSuccessTimes,proto3" json:"appealSuccessTimes,omitempty"`
	AppealTimes                int32   `protobuf:"varint,5,opt,name=appealTimes,proto3" json:"appealTimes,omitempty"`
	ApplicationTime            int64   `protobuf:"varint,6,opt,name=applicationTime,proto3" json:"applicationTime,omitempty"`
	Avatar                     string  `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Bank                       string  `protobuf:"bytes,8,opt,name=bank,proto3" json:"bank,omitempty"`
	Branch                     string  `protobuf:"bytes,9,opt,name=branch,proto3" json:"branch,omitempty"`
	CardNo                     string  `protobuf:"bytes,10,opt,name=cardNo,proto3" json:"cardNo,omitempty"`
	CertifiedBusinessApplyTime int64   `protobuf:"varint,11,opt,name=certifiedBusinessApplyTime,proto3" json:"certifiedBusinessApplyTime,omitempty"`
	CertifiedBusinessCheckTime int64   `protobuf:"varint,12,opt,name=certifiedBusinessCheckTime,proto3" json:"certifiedBusinessCheckTime,omitempty"`
	CertifiedBusinessStatus    int32   `protobuf:"varint,13,opt,name=certifiedBusinessStatus,proto3" json:"certifiedBusinessStatus,omitempty"`
	ChannelId                  int32   `protobuf:"varint,14,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Email                      string  `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`
	FirstLevel                 int32   `protobuf:"varint,16,opt,name=firstLevel,proto3" json:"firstLevel,omitempty"`
	GoogleDate                 int64   `protobuf:"varint,17,opt,name=googleDate,proto3" json:"googleDate,omitempty"`
	GoogleKey                  string  `protobuf:"bytes,18,opt,name=googleKey,proto3" json:"googleKey,omitempty"`
	GoogleState                int32   `protobuf:"varint,19,opt,name=googleState,proto3" json:"googleState,omitempty"`
	IdNumber                   string  `protobuf:"bytes,20,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	InviterId                  int64   `protobuf:"varint,21,opt,name=inviterId,proto3" json:"inviterId,omitempty"`
	IsChannel                  int32   `protobuf:"varint,22,opt,name=isChannel,proto3" json:"isChannel,omitempty"`
	JyPassword                 string  `protobuf:"bytes,23,opt,name=jyPassword,proto3" json:"jyPassword,omitempty"`
	LastLoginTime              int64   `protobuf:"varint,24,opt,name=lastLoginTime,proto3" json:"lastLoginTime,omitempty"`
	City                       string  `protobuf:"bytes,25,opt,name=city,proto3" json:"city,omitempty"`
	Country                    string  `protobuf:"bytes,26,opt,name=country,proto3" json:"country,omitempty"`
	District                   string  `protobuf:"bytes,27,opt,name=district,proto3" json:"district,omitempty"`
	Province                   string  `protobuf:"bytes,28,opt,name=province,proto3" json:"province,omitempty"`
	LoginCount                 int32   `protobuf:"varint,29,opt,name=loginCount,proto3" json:"loginCount,omitempty"`
	LoginLock                  int32   `protobuf:"varint,30,opt,name=loginLock,proto3" json:"loginLock,omitempty"`
	Margin                     string  `protobuf:"bytes,31,opt,name=margin,proto3" json:"margin,omitempty"`
	MemberLevel                int32   `protobuf:"varint,32,opt,name=memberLevel,proto3" json:"memberLevel,omitempty"`
	MobilePhone                string  `protobuf:"bytes,33,opt,name=mobilePhone,proto3" json:"mobilePhone,omitempty"`
	Password                   string  `protobuf:"bytes,34,opt,name=password,proto3" json:"password,omitempty"`
	PromotionCode              string  `protobuf:"bytes,35,opt,name=promotionCode,proto3" json:"promotionCode,omitempty"`
	PublishAdvertise           int32   `protobuf:"varint,36,opt,name=publishAdvertise,proto3" json:"publishAdvertise,omitempty"`
	RealName                   string  `protobuf:"bytes,37,opt,name=realName,proto3" json:"realName,omitempty"`
	RealNameStatus             int32   `protobuf:"varint,38,opt,name=realNameStatus,proto3" json:"realNameStatus,omitempty"`
	RegistrationTime           int64   `protobuf:"varint,39,opt,name=registrationTime,proto3" json:"registrationTime,omitempty"`
	Salt                       string  `protobuf:"bytes,40,opt,name=salt,proto3" json:"salt,omitempty"`
	SecondLevel                int32   `protobuf:"varint,41,opt,name=secondLevel,proto3" json:"secondLevel,omitempty"`
	SignInAbility              int32   `protobuf:"varint,42,opt,name=signInAbility,proto3" json:"signInAbility,omitempty"`
	Status                     int32   `protobuf:"varint,43,opt,name=status,proto3" json:"status,omitempty"`
	ThirdLevel                 int32   `protobuf:"varint,44,opt,name=thirdLevel,proto3" json:"thirdLevel,omitempty"`
	Token                      string  `protobuf:"bytes,45,opt,name=token,proto3" json:"token,omitempty"`
	TokenExpireTime            int64   `protobuf:"varint,46,opt,name=tokenExpireTime,proto3" json:"tokenExpireTime,omitempty"`
	TransactionStatus          int32   `protobuf:"varint,47,opt,name=transactionStatus,proto3" json:"transactionStatus,omitempty"`
	TransactionTime            int64   `protobuf:"varint,48,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	Transactions               int32   `protobuf:"varint,49,opt,name=transactions,proto3" json:"transactions,omitempty"`
	Username                   string  `protobuf:"bytes,50,opt,name=username,proto3" json:"username,omitempty"`
	QrWeCodeUrl                string  `protobuf:"bytes,51,opt,name=qrWeCodeUrl,proto3" json:"qrWeCodeUrl,omitempty"`
	Wechat                     string  `protobuf:"bytes,52,opt,name=wechat,proto3" json:"wechat,omitempty"`
	Local                      string  `protobuf:"bytes,53,opt,name=local,proto3" json:"local,omitempty"`
	Integration                int64   `protobuf:"varint,54,opt,name=integration,proto3" json:"integration,omitempty"`
	MemberGradeId              int64   `protobuf:"varint,55,opt,name=memberGradeId,proto3" json:"memberGradeId,omitempty"`
	KycStatus                  int32   `protobuf:"varint,56,opt,name=kycStatus,proto3" json:"kycStatus,omitempty"`
	GeneralizeTotal            int64   `protobuf:"varint,57,opt,name=generalizeTotal,proto3" json:"generalizeTotal,omitempty"`
	InviterParentId            int64   `protobuf:"varint,58,opt,name=inviterParentId,proto3" json:"inviterParentId,omitempty"`
	SuperPartner               string  `protobuf:"bytes,59,opt,name=superPartner,proto3" json:"superPartner,omitempty"`
	KickFee                    float64 `protobuf:"fixed64,60,opt,name=kickFee,proto3" json:"kickFee,omitempty"`
	Power                      float64 `protobuf:"fixed64,61,opt,name=power,proto3" json:"power,omitempty"`
	TeamLevel                  int32   `protobuf:"varint,62,opt,name=teamLevel,proto3" json:"teamLevel,omitempty"`
	TeamPower                  float64 `protobuf:"fixed64,63,opt,name=teamPower,proto3" json:"teamPower,omitempty"`
	MemberLevelId              int64   `protobuf:"varint,64,opt,name=memberLevelId,proto3" json:"memberLevelId,omitempty"`
}

func (x *MemberInfo) Reset() {
	*x = MemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberInfo) ProtoMessage() {}

func (x *MemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberInfo.ProtoReflect.Descriptor instead.
func (*MemberInfo) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{7}
}

func (x *MemberInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberInfo) GetAliNo() string {
	if x != nil {
		return x.AliNo
	}
	return ""
}

func (x *MemberInfo) GetQrCodeUrl() string {
	if x != nil {
		return x.QrCodeUrl
	}
	return ""
}

func (x *MemberInfo) GetAppealSuccessTimes() int32 {
	if x != nil {
		return x.AppealSuccessTimes
	}
	return 0
}

func (x *MemberInfo) GetAppealTimes() int32 {
	if x != nil {
		return x.AppealTimes
	}
	return 0
}

func (x *MemberInfo) GetApplicationTime() int64 {
	if x != nil {
		return x.ApplicationTime
	}
	return 0
}

func (x *MemberInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *MemberInfo) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *MemberInfo) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *MemberInfo) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *MemberInfo) GetCertifiedBusinessApplyTime() int64 {
	if x != nil {
		return x.CertifiedBusinessApplyTime
	}
	return 0
}

func (x *MemberInfo) GetCertifiedBusinessCheckTime() int64 {
	if x != nil {
		return x.CertifiedBusinessCheckTime
	}
	return 0
}

func (x *MemberInfo) GetCertifiedBusinessStatus() int32 {
	if x != nil {
		return x.CertifiedBusinessStatus
	}
	return 0
}

func (x *MemberInfo) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MemberInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MemberInfo) GetFirstLevel() int32 {
	if x != nil {
		return x.FirstLevel
	}
	return 0
}

func (x *MemberInfo) GetGoogleDate() int64 {
	if x != nil {
		return x.GoogleDate
	}
	return 0
}

func (x *MemberInfo) GetGoogleKey() string {
	if x != nil {
		return x.GoogleKey
	}
	return ""
}

func (x *MemberInfo) GetGoogleState() int32 {
	if x != nil {
		return x.GoogleState
	}
	return 0
}

func (x *MemberInfo) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *MemberInfo) GetInviterId() int64 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *MemberInfo) GetIsChannel() int32 {
	if x != nil {
		return x.IsChannel
	}
	return 0
}

func (x *MemberInfo) GetJyPassword() string {
	if x != nil {
		return x.JyPassword
	}
	return ""
}

func (x *MemberInfo) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *MemberInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MemberInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *MemberInfo) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *MemberInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *MemberInfo) GetLoginCount() int32 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *MemberInfo) GetLoginLock() int32 {
	if x != nil {
		return x.LoginLock
	}
	return 0
}

func (x *MemberInfo) GetMargin() string {
	if x != nil {
		return x.Margin
	}
	return ""
}

func (x *MemberInfo) GetMemberLevel() int32 {
	if x != nil {
		return x.MemberLevel
	}
	return 0
}

func (x *MemberInfo) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *MemberInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MemberInfo) GetPromotionCode() string {
	if x != nil {
		return x.PromotionCode
	}
	return ""
}

func (x *MemberInfo) GetPublishAdvertise() int32 {
	if x != nil {
		return x.PublishAdvertise
	}
	return 0
}

func (x *MemberInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *MemberInfo) GetRealNameStatus() int32 {
	if x != nil {
		return x.RealNameStatus
	}
	return 0
}

func (x *MemberInfo) GetRegistrationTime() int64 {
	if x != nil {
		return x.RegistrationTime
	}
	return 0
}

func (x *MemberInfo) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *MemberInfo) GetSecondLevel() int32 {
	if x != nil {
		return x.SecondLevel
	}
	return 0
}

func (x *MemberInfo) GetSignInAbility() int32 {
	if x != nil {
		return x.SignInAbility
	}
	return 0
}

func (x *MemberInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MemberInfo) GetThirdLevel() int32 {
	if x != nil {
		return x.ThirdLevel
	}
	return 0
}

func (x *MemberInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *MemberInfo) GetTokenExpireTime() int64 {
	if x != nil {
		return x.TokenExpireTime
	}
	return 0
}

func (x *MemberInfo) GetTransactionStatus() int32 {
	if x != nil {
		return x.TransactionStatus
	}
	return 0
}

func (x *MemberInfo) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *MemberInfo) GetTransactions() int32 {
	if x != nil {
		return x.Transactions
	}
	return 0
}

func (x *MemberInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MemberInfo) GetQrWeCodeUrl() string {
	if x != nil {
		return x.QrWeCodeUrl
	}
	return ""
}

func (x *MemberInfo) GetWechat() string {
	if x != nil {
		return x.Wechat
	}
	return ""
}

func (x *MemberInfo) GetLocal() string {
	if x != nil {
		return x.Local
	}
	return ""
}

func (x *MemberInfo) GetIntegration() int64 {
	if x != nil {
		return x.Integration
	}
	return 0
}

func (x *MemberInfo) GetMemberGradeId() int64 {
	if x != nil {
		return x.MemberGradeId
	}
	return 0
}

func (x *MemberInfo) GetKycStatus() int32 {
	if x != nil {
		return x.KycStatus
	}
	return 0
}

func (x *MemberInfo) GetGeneralizeTotal() int64 {
	if x != nil {
		return x.GeneralizeTotal
	}
	return 0
}

func (x *MemberInfo) GetInviterParentId() int64 {
	if x != nil {
		return x.InviterParentId
	}
	return 0
}

func (x *MemberInfo) GetSuperPartner() string {
	if x != nil {
		return x.SuperPartner
	}
	return ""
}

func (x *MemberInfo) GetKickFee() float64 {
	if x != nil {
		return x.KickFee
	}
	return 0
}

func (x *MemberInfo) GetPower() float64 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *MemberInfo) GetTeamLevel() int32 {
	if x != nil {
		return x.TeamLevel
	}
	return 0
}

func (x *MemberInfo) GetTeamPower() float64 {
	if x != nil {
		return x.TeamPower
	}
	return 0
}

func (x *MemberInfo) GetMemberLevelId() int64 {
	if x != nil {
		return x.MemberLevelId
	}
	return 0
}

type MembersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Members []*MemberInfo `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *MembersRes) Reset() {
	*x = MembersRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembersRes) ProtoMessage() {}

func (x *MembersRes) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembersRes.ProtoReflect.Descriptor instead.
func (*MembersRes) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{8}
}

func (x *MembersRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MembersRes) GetMembers() []*MemberInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string      `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Captcha  *CaptchaReq `protobuf:"bytes,3,opt,name=captcha,proto3" json:"captcha,omitempty"`
	Ip       string      `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{9}
}

func (x *LoginReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetCaptcha() *CaptchaReq {
	if x != nil {
		return x.Captcha
	}
	return nil
}

func (x *LoginReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type LoginRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username      string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	MemberLevel   string `protobuf:"bytes,3,opt,name=memberLevel,proto3" json:"memberLevel,omitempty"`
	RealName      string `protobuf:"bytes,4,opt,name=realName,proto3" json:"realName,omitempty"`
	Country       string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Avatar        string `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	PromotionCode string `protobuf:"bytes,7,opt,name=promotionCode,proto3" json:"promotionCode,omitempty"`
	Id            int64  `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	LoginCount    int32  `protobuf:"varint,9,opt,name=loginCount,proto3" json:"loginCount,omitempty"`
	SuperPartner  string `protobuf:"bytes,10,opt,name=superPartner,proto3" json:"superPartner,omitempty"`
	MemberRate    int32  `protobuf:"varint,11,opt,name=memberRate,proto3" json:"memberRate,omitempty"`
}

func (x *LoginRes) Reset() {
	*x = LoginRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRes) ProtoMessage() {}

func (x *LoginRes) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRes.ProtoReflect.Descriptor instead.
func (*LoginRes) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{10}
}

func (x *LoginRes) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRes) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginRes) GetMemberLevel() string {
	if x != nil {
		return x.MemberLevel
	}
	return ""
}

func (x *LoginRes) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *LoginRes) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *LoginRes) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LoginRes) GetPromotionCode() string {
	if x != nil {
		return x.PromotionCode
	}
	return ""
}

func (x *LoginRes) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginRes) GetLoginCount() int32 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *LoginRes) GetSuperPartner() string {
	if x != nil {
		return x.SuperPartner
	}
	return ""
}

func (x *LoginRes) GetMemberRate() int32 {
	if x != nil {
		return x.MemberRate
	}
	return 0
}

type AssetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinName string `protobuf:"bytes,1,opt,name=coinName,proto3" json:"coinName,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	UserId   int64  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AssetReq) Reset() {
	*x = AssetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReq) ProtoMessage() {}

func (x *AssetReq) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReq.ProtoReflect.Descriptor instead.
func (*AssetReq) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{11}
}

func (x *AssetReq) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *AssetReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AssetReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CanAutoWithdraw   int32   `protobuf:"varint,3,opt,name=canAutoWithdraw,proto3" json:"canAutoWithdraw,omitempty"`
	CanRecharge       int32   `protobuf:"varint,4,opt,name=canRecharge,proto3" json:"canRecharge,omitempty"`
	CanTransfer       int32   `protobuf:"varint,5,opt,name=canTransfer,proto3" json:"canTransfer,omitempty"`
	CanWithdraw       int32   `protobuf:"varint,6,opt,name=canWithdraw,proto3" json:"canWithdraw,omitempty"`
	CnyRate           float64 `protobuf:"fixed64,7,opt,name=cnyRate,proto3" json:"cnyRate,omitempty"`
	EnableRpc         int32   `protobuf:"varint,8,opt,name=enableRpc,proto3" json:"enableRpc,omitempty"`
	IsPlatformCoin    int32   `protobuf:"varint,9,opt,name=isPlatformCoin,proto3" json:"isPlatformCoin,omitempty"`
	MaxTxFee          float64 `protobuf:"fixed64,10,opt,name=maxTxFee,proto3" json:"maxTxFee,omitempty"`
	MaxWithdrawAmount float64 `protobuf:"fixed64,11,opt,name=maxWithdrawAmount,proto3" json:"maxWithdrawAmount,omitempty"`
	MinTxFee          float64 `protobuf:"fixed64,12,opt,name=minTxFee,proto3" json:"minTxFee,omitempty"`
	MinWithdrawAmount float64 `protobuf:"fixed64,13,opt,name=minWithdrawAmount,proto3" json:"minWithdrawAmount,omitempty"`
	NameCn            string  `protobuf:"bytes,14,opt,name=nameCn,proto3" json:"nameCn,omitempty"`
	Sort              int32   `protobuf:"varint,15,opt,name=sort,proto3" json:"sort,omitempty"`
	Status            int32   `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	Unit              string  `protobuf:"bytes,17,opt,name=unit,proto3" json:"unit,omitempty"`
	UsdRate           float64 `protobuf:"fixed64,18,opt,name=usdRate,proto3" json:"usdRate,omitempty"`
	WithdrawThreshold float64 `protobuf:"fixed64,19,opt,name=withdrawThreshold,proto3" json:"withdrawThreshold,omitempty"`
	HasLegal          int32   `protobuf:"varint,20,opt,name=hasLegal,proto3" json:"hasLegal,omitempty"`
	ColdWalletAddress string  `protobuf:"bytes,21,opt,name=coldWalletAddress,proto3" json:"coldWalletAddress,omitempty"`
	MinerFee          float64 `protobuf:"fixed64,22,opt,name=minerFee,proto3" json:"minerFee,omitempty"`
	WithdrawScale     int32   `protobuf:"varint,23,opt,name=withdrawScale,proto3" json:"withdrawScale,omitempty"`
	AccountType       int32   `protobuf:"varint,24,opt,name=accountType,proto3" json:"accountType,omitempty"`
	DepositAddress    string  `protobuf:"bytes,25,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	Infolink          string  `protobuf:"bytes,26,opt,name=infolink,proto3" json:"infolink,omitempty"`
	Information       string  `protobuf:"bytes,27,opt,name=information,proto3" json:"information,omitempty"`
	MinRechargeAmount float64 `protobuf:"fixed64,28,opt,name=minRechargeAmount,proto3" json:"minRechargeAmount,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{12}
}

func (x *Coin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetCanAutoWithdraw() int32 {
	if x != nil {
		return x.CanAutoWithdraw
	}
	return 0
}

func (x *Coin) GetCanRecharge() int32 {
	if x != nil {
		return x.CanRecharge
	}
	return 0
}

func (x *Coin) GetCanTransfer() int32 {
	if x != nil {
		return x.CanTransfer
	}
	return 0
}

func (x *Coin) GetCanWithdraw() int32 {
	if x != nil {
		return x.CanWithdraw
	}
	return 0
}

func (x *Coin) GetCnyRate() float64 {
	if x != nil {
		return x.CnyRate
	}
	return 0
}

func (x *Coin) GetEnableRpc() int32 {
	if x != nil {
		return x.EnableRpc
	}
	return 0
}

func (x *Coin) GetIsPlatformCoin() int32 {
	if x != nil {
		return x.IsPlatformCoin
	}
	return 0
}

func (x *Coin) GetMaxTxFee() float64 {
	if x != nil {
		return x.MaxTxFee
	}
	return 0
}

func (x *Coin) GetMaxWithdrawAmount() float64 {
	if x != nil {
		return x.MaxWithdrawAmount
	}
	return 0
}

func (x *Coin) GetMinTxFee() float64 {
	if x != nil {
		return x.MinTxFee
	}
	return 0
}

func (x *Coin) GetMinWithdrawAmount() float64 {
	if x != nil {
		return x.MinWithdrawAmount
	}
	return 0
}

func (x *Coin) GetNameCn() string {
	if x != nil {
		return x.NameCn
	}
	return ""
}

func (x *Coin) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Coin) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Coin) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Coin) GetUsdRate() float64 {
	if x != nil {
		return x.UsdRate
	}
	return 0
}

func (x *Coin) GetWithdrawThreshold() float64 {
	if x != nil {
		return x.WithdrawThreshold
	}
	return 0
}

func (x *Coin) GetHasLegal() int32 {
	if x != nil {
		return x.HasLegal
	}
	return 0
}

func (x *Coin) GetColdWalletAddress() string {
	if x != nil {
		return x.ColdWalletAddress
	}
	return ""
}

func (x *Coin) GetMinerFee() float64 {
	if x != nil {
		return x.MinerFee
	}
	return 0
}

func (x *Coin) GetWithdrawScale() int32 {
	if x != nil {
		return x.WithdrawScale
	}
	return 0
}

func (x *Coin) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *Coin) GetDepositAddress() string {
	if x != nil {
		return x.DepositAddress
	}
	return ""
}

func (x *Coin) GetInfolink() string {
	if x != nil {
		return x.Infolink
	}
	return ""
}

func (x *Coin) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *Coin) GetMinRechargeAmount() float64 {
	if x != nil {
		return x.MinRechargeAmount
	}
	return 0
}

type MemberWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address        string  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Balance        float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	FrozenBalance  float64 `protobuf:"fixed64,4,opt,name=frozenBalance,proto3" json:"frozenBalance,omitempty"`
	ReleaseBalance float64 `protobuf:"fixed64,5,opt,name=releaseBalance,proto3" json:"releaseBalance,omitempty"`
	IsLock         int32   `protobuf:"varint,6,opt,name=isLock,proto3" json:"isLock,omitempty"`
	MemberId       int64   `protobuf:"varint,7,opt,name=memberId,proto3" json:"memberId,omitempty"`
	Version        int32   `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	Coin           *Coin   `protobuf:"bytes,9,opt,name=coin,proto3" json:"coin,omitempty"`
	ToReleased     float64 `protobuf:"fixed64,10,opt,name=toReleased,proto3" json:"toReleased,omitempty"`
}

func (x *MemberWallet) Reset() {
	*x = MemberWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberWallet) ProtoMessage() {}

func (x *MemberWallet) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberWallet.ProtoReflect.Descriptor instead.
func (*MemberWallet) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{13}
}

func (x *MemberWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MemberWallet) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *MemberWallet) GetFrozenBalance() float64 {
	if x != nil {
		return x.FrozenBalance
	}
	return 0
}

func (x *MemberWallet) GetReleaseBalance() float64 {
	if x != nil {
		return x.ReleaseBalance
	}
	return 0
}

func (x *MemberWallet) GetIsLock() int32 {
	if x != nil {
		return x.IsLock
	}
	return 0
}

func (x *MemberWallet) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *MemberWallet) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MemberWallet) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *MemberWallet) GetToReleased() float64 {
	if x != nil {
		return x.ToReleased
	}
	return 0
}

type ErrorDemoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ErrorDemoReq) Reset() {
	*x = ErrorDemoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDemoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDemoReq) ProtoMessage() {}

func (x *ErrorDemoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDemoReq.ProtoReflect.Descriptor instead.
func (*ErrorDemoReq) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{14}
}

type ErrorDemoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ErrorDemoRes) Reset() {
	*x = ErrorDemoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ucenter_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDemoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDemoRes) ProtoMessage() {}

func (x *ErrorDemoRes) ProtoReflect() protoreflect.Message {
	mi := &file_ucenter_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDemoRes.ProtoReflect.Descriptor instead.
func (*ErrorDemoRes) Descriptor() ([]byte, []int) {
	return file_ucenter_proto_rawDescGZIP(), []int{15}
}

var File_ucenter_proto protoreflect.FileDescriptor

var file_ucenter_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x85, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x63,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65,
	0x71, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x22, 0x3a, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x08, 0x0a, 0x06,
	0x52, 0x65, 0x67, 0x52, 0x65, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x22,
	0x39, 0x0a, 0x07, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x27, 0x0a, 0x09, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbe, 0x10, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x72, 0x57, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x72, 0x57, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x63, 0x6b, 0x46, 0x65,
	0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x69, 0x63, 0x6b, 0x46, 0x65, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x2d, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22,
	0xc6, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x90, 0x07, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x41, 0x75, 0x74, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x63, 0x61, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6e, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x6e, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x46, 0x65,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x46, 0x65,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x43,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x75, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x0c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22,
	0x0e, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x71, 0x22,
	0x0e, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x32,
	0x8a, 0x03, 0x0a, 0x07, 0x55, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0f,
	0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x2e, 0x75,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0e,
	0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x46, 0x69, 0x6e,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x13, 0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x75, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42,
	0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x11, 0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x75, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x15,
	0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x6d, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x42, 0x0b, 0x5a, 0x09,
	0x2e, 0x2f, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ucenter_proto_rawDescOnce sync.Once
	file_ucenter_proto_rawDescData = file_ucenter_proto_rawDesc
)

func file_ucenter_proto_rawDescGZIP() []byte {
	file_ucenter_proto_rawDescOnce.Do(func() {
		file_ucenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_ucenter_proto_rawDescData)
	})
	return file_ucenter_proto_rawDescData
}

var file_ucenter_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ucenter_proto_goTypes = []interface{}{
	(*RegReq)(nil),       // 0: ucenter.RegReq
	(*CaptchaReq)(nil),   // 1: ucenter.CaptchaReq
	(*RegRes)(nil),       // 2: ucenter.RegRes
	(*NoRes)(nil),        // 3: ucenter.NoRes
	(*CodeReq)(nil),      // 4: ucenter.CodeReq
	(*MemberReq)(nil),    // 5: ucenter.MemberReq
	(*MembersReq)(nil),   // 6: ucenter.MembersReq
	(*MemberInfo)(nil),   // 7: ucenter.MemberInfo
	(*MembersRes)(nil),   // 8: ucenter.MembersRes
	(*LoginReq)(nil),     // 9: ucenter.LoginReq
	(*LoginRes)(nil),     // 10: ucenter.LoginRes
	(*AssetReq)(nil),     // 11: ucenter.AssetReq
	(*Coin)(nil),         // 12: ucenter.Coin
	(*MemberWallet)(nil), // 13: ucenter.MemberWallet
	(*ErrorDemoReq)(nil), // 14: ucenter.ErrorDemoReq
	(*ErrorDemoRes)(nil), // 15: ucenter.ErrorDemoRes
}
var file_ucenter_proto_depIdxs = []int32{
	1,  // 0: ucenter.RegReq.captcha:type_name -> ucenter.CaptchaReq
	7,  // 1: ucenter.MembersRes.members:type_name -> ucenter.MemberInfo
	1,  // 2: ucenter.LoginReq.captcha:type_name -> ucenter.CaptchaReq
	12, // 3: ucenter.MemberWallet.coin:type_name -> ucenter.Coin
	0,  // 4: ucenter.Ucenter.registerByPhone:input_type -> ucenter.RegReq
	4,  // 5: ucenter.Ucenter.sendCode:input_type -> ucenter.CodeReq
	5,  // 6: ucenter.Ucenter.FindMemberById:input_type -> ucenter.MemberReq
	6,  // 7: ucenter.Ucenter.FindMembers:input_type -> ucenter.MembersReq
	9,  // 8: ucenter.Ucenter.login:input_type -> ucenter.LoginReq
	11, // 9: ucenter.Ucenter.findWalletBySymbol:input_type -> ucenter.AssetReq
	14, // 10: ucenter.Ucenter.errorDemo:input_type -> ucenter.ErrorDemoReq
	2,  // 11: ucenter.Ucenter.registerByPhone:output_type -> ucenter.RegRes
	3,  // 12: ucenter.Ucenter.sendCode:output_type -> ucenter.NoRes
	7,  // 13: ucenter.Ucenter.FindMemberById:output_type -> ucenter.MemberInfo
	8,  // 14: ucenter.Ucenter.FindMembers:output_type -> ucenter.MembersRes
	10, // 15: ucenter.Ucenter.login:output_type -> ucenter.LoginRes
	13, // 16: ucenter.Ucenter.findWalletBySymbol:output_type -> ucenter.MemberWallet
	15, // 17: ucenter.Ucenter.errorDemo:output_type -> ucenter.ErrorDemoRes
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_ucenter_proto_init() }
func file_ucenter_proto_init() {
	if File_ucenter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ucenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptchaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembersRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDemoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ucenter_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDemoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ucenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ucenter_proto_goTypes,
		DependencyIndexes: file_ucenter_proto_depIdxs,
		MessageInfos:      file_ucenter_proto_msgTypes,
	}.Build()
	File_ucenter_proto = out.File
	file_ucenter_proto_rawDesc = nil
	file_ucenter_proto_goTypes = nil
	file_ucenter_proto_depIdxs = nil
}
