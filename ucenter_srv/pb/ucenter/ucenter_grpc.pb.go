// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: ucenter.proto

package ucenter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ucenter_RegisterByPhone_FullMethodName    = "/ucenter.Ucenter/registerByPhone"
	Ucenter_SendCode_FullMethodName           = "/ucenter.Ucenter/sendCode"
	Ucenter_FindMemberById_FullMethodName     = "/ucenter.Ucenter/FindMemberById"
	Ucenter_FindMembers_FullMethodName        = "/ucenter.Ucenter/FindMembers"
	Ucenter_Login_FullMethodName              = "/ucenter.Ucenter/login"
	Ucenter_FindWalletBySymbol_FullMethodName = "/ucenter.Ucenter/findWalletBySymbol"
	Ucenter_ErrorDemo_FullMethodName          = "/ucenter.Ucenter/errorDemo"
)

// UcenterClient is the client API for Ucenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UcenterClient interface {
	// 注册
	RegisterByPhone(ctx context.Context, in *RegReq, opts ...grpc.CallOption) (*RegRes, error)
	SendCode(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*NoRes, error)
	// 会员查找
	FindMemberById(ctx context.Context, in *MemberReq, opts ...grpc.CallOption) (*MemberInfo, error)
	// 会员列表
	FindMembers(ctx context.Context, in *MembersReq, opts ...grpc.CallOption) (*MembersRes, error)
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	FindWalletBySymbol(ctx context.Context, in *AssetReq, opts ...grpc.CallOption) (*MemberWallet, error)
	// error demo
	ErrorDemo(ctx context.Context, in *ErrorDemoReq, opts ...grpc.CallOption) (*ErrorDemoRes, error)
}

type ucenterClient struct {
	cc grpc.ClientConnInterface
}

func NewUcenterClient(cc grpc.ClientConnInterface) UcenterClient {
	return &ucenterClient{cc}
}

func (c *ucenterClient) RegisterByPhone(ctx context.Context, in *RegReq, opts ...grpc.CallOption) (*RegRes, error) {
	out := new(RegRes)
	err := c.cc.Invoke(ctx, Ucenter_RegisterByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterClient) SendCode(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*NoRes, error) {
	out := new(NoRes)
	err := c.cc.Invoke(ctx, Ucenter_SendCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterClient) FindMemberById(ctx context.Context, in *MemberReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	out := new(MemberInfo)
	err := c.cc.Invoke(ctx, Ucenter_FindMemberById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterClient) FindMembers(ctx context.Context, in *MembersReq, opts ...grpc.CallOption) (*MembersRes, error) {
	out := new(MembersRes)
	err := c.cc.Invoke(ctx, Ucenter_FindMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, Ucenter_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterClient) FindWalletBySymbol(ctx context.Context, in *AssetReq, opts ...grpc.CallOption) (*MemberWallet, error) {
	out := new(MemberWallet)
	err := c.cc.Invoke(ctx, Ucenter_FindWalletBySymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterClient) ErrorDemo(ctx context.Context, in *ErrorDemoReq, opts ...grpc.CallOption) (*ErrorDemoRes, error) {
	out := new(ErrorDemoRes)
	err := c.cc.Invoke(ctx, Ucenter_ErrorDemo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UcenterServer is the server API for Ucenter service.
// All implementations must embed UnimplementedUcenterServer
// for forward compatibility
type UcenterServer interface {
	// 注册
	RegisterByPhone(context.Context, *RegReq) (*RegRes, error)
	SendCode(context.Context, *CodeReq) (*NoRes, error)
	// 会员查找
	FindMemberById(context.Context, *MemberReq) (*MemberInfo, error)
	// 会员列表
	FindMembers(context.Context, *MembersReq) (*MembersRes, error)
	// 登录
	Login(context.Context, *LoginReq) (*LoginRes, error)
	FindWalletBySymbol(context.Context, *AssetReq) (*MemberWallet, error)
	// error demo
	ErrorDemo(context.Context, *ErrorDemoReq) (*ErrorDemoRes, error)
	mustEmbedUnimplementedUcenterServer()
}

// UnimplementedUcenterServer must be embedded to have forward compatible implementations.
type UnimplementedUcenterServer struct {
}

func (UnimplementedUcenterServer) RegisterByPhone(context.Context, *RegReq) (*RegRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByPhone not implemented")
}
func (UnimplementedUcenterServer) SendCode(context.Context, *CodeReq) (*NoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedUcenterServer) FindMemberById(context.Context, *MemberReq) (*MemberInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMemberById not implemented")
}
func (UnimplementedUcenterServer) FindMembers(context.Context, *MembersReq) (*MembersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMembers not implemented")
}
func (UnimplementedUcenterServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUcenterServer) FindWalletBySymbol(context.Context, *AssetReq) (*MemberWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWalletBySymbol not implemented")
}
func (UnimplementedUcenterServer) ErrorDemo(context.Context, *ErrorDemoReq) (*ErrorDemoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrorDemo not implemented")
}
func (UnimplementedUcenterServer) mustEmbedUnimplementedUcenterServer() {}

// UnsafeUcenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UcenterServer will
// result in compilation errors.
type UnsafeUcenterServer interface {
	mustEmbedUnimplementedUcenterServer()
}

func RegisterUcenterServer(s grpc.ServiceRegistrar, srv UcenterServer) {
	s.RegisterService(&Ucenter_ServiceDesc, srv)
}

func _Ucenter_RegisterByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterServer).RegisterByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ucenter_RegisterByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterServer).RegisterByPhone(ctx, req.(*RegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ucenter_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ucenter_SendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterServer).SendCode(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ucenter_FindMemberById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterServer).FindMemberById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ucenter_FindMemberById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterServer).FindMemberById(ctx, req.(*MemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ucenter_FindMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterServer).FindMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ucenter_FindMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterServer).FindMembers(ctx, req.(*MembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ucenter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ucenter_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ucenter_FindWalletBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterServer).FindWalletBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ucenter_FindWalletBySymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterServer).FindWalletBySymbol(ctx, req.(*AssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ucenter_ErrorDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorDemoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterServer).ErrorDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ucenter_ErrorDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterServer).ErrorDemo(ctx, req.(*ErrorDemoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ucenter_ServiceDesc is the grpc.ServiceDesc for Ucenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ucenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ucenter.Ucenter",
	HandlerType: (*UcenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerByPhone",
			Handler:    _Ucenter_RegisterByPhone_Handler,
		},
		{
			MethodName: "sendCode",
			Handler:    _Ucenter_SendCode_Handler,
		},
		{
			MethodName: "FindMemberById",
			Handler:    _Ucenter_FindMemberById_Handler,
		},
		{
			MethodName: "FindMembers",
			Handler:    _Ucenter_FindMembers_Handler,
		},
		{
			MethodName: "login",
			Handler:    _Ucenter_Login_Handler,
		},
		{
			MethodName: "findWalletBySymbol",
			Handler:    _Ucenter_FindWalletBySymbol_Handler,
		},
		{
			MethodName: "errorDemo",
			Handler:    _Ucenter_ErrorDemo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ucenter.proto",
}
