// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	memberFieldNames          = builder.RawFieldNames(&Member{})
	memberRows                = strings.Join(memberFieldNames, ",")
	memberRowsExpectAutoSet   = strings.Join(stringx.Remove(memberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	memberRowsWithPlaceHolder = strings.Join(stringx.Remove(memberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	memberModel interface {
		Insert(ctx context.Context, data *Member) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Member, error)
		GetTotal(ctx context.Context, where string) (int64, error)
		FindMembers(ctx context.Context, where string, Page, PageSize int64) ([]*Member, error)
		FindOneByMobilePhone(ctx context.Context, mobilePhone string) (*Member, error)
		FindOneByUsername(ctx context.Context, username string) (*Member, error)
		Update(ctx context.Context, data *Member) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMemberModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Member struct {
		Id                         int64   `db:"id"`
		AliNo                      string  `db:"ali_no"`
		QrCodeUrl                  string  `db:"qr_code_url"`
		AppealSuccessTimes         int64   `db:"appeal_success_times"`
		AppealTimes                int64   `db:"appeal_times"`
		ApplicationTime            int64   `db:"application_time"`
		Avatar                     string  `db:"avatar"`
		Bank                       string  `db:"bank"`
		Branch                     string  `db:"branch"`
		CardNo                     string  `db:"card_no"`
		CertifiedBusinessApplyTime int64   `db:"certified_business_apply_time"`
		CertifiedBusinessCheckTime int64   `db:"certified_business_check_time"`
		CertifiedBusinessStatus    int64   `db:"certified_business_status"`
		ChannelId                  int64   `db:"channel_id"`
		Email                      string  `db:"email"`
		FirstLevel                 int64   `db:"first_level"`
		GoogleDate                 int64   `db:"google_date"`
		GoogleKey                  string  `db:"google_key"`
		GoogleState                int64   `db:"google_state"`
		IdNumber                   string  `db:"id_number"`
		InviterId                  int64   `db:"inviter_id"`
		IsChannel                  int64   `db:"is_channel"`
		JyPassword                 string  `db:"jy_password"`
		LastLoginTime              int64   `db:"last_login_time"`
		City                       string  `db:"city"`
		Country                    string  `db:"country"`
		District                   string  `db:"district"`
		Province                   string  `db:"province"`
		LoginCount                 int64   `db:"login_count"`
		LoginLock                  int64   `db:"login_lock"`
		Margin                     string  `db:"margin"`
		MemberLevel                int64   `db:"member_level"`
		MobilePhone                string  `db:"mobile_phone"`
		Password                   string  `db:"password"`
		PromotionCode              string  `db:"promotion_code"`
		PublishAdvertise           int64   `db:"publish_advertise"`
		RealName                   string  `db:"real_name"`
		RealNameStatus             int64   `db:"real_name_status"`
		RegistrationTime           int64   `db:"registration_time"`
		Salt                       string  `db:"salt"`
		SecondLevel                int64   `db:"second_level"`
		SignInAbility              int64   `db:"sign_in_ability"`
		Status                     int64   `db:"status"`
		ThirdLevel                 int64   `db:"third_level"`
		Token                      string  `db:"token"`
		TokenExpireTime            int64   `db:"token_expire_time"`
		TransactionStatus          int64   `db:"transaction_status"`
		TransactionTime            int64   `db:"transaction_time"`
		Transactions               int64   `db:"transactions"`
		Username                   string  `db:"username"`
		QrWeCodeUrl                string  `db:"qr_we_code_url"`
		Wechat                     string  `db:"wechat"`
		Local                      string  `db:"local"`
		Integration                int64   `db:"integration"`
		MemberGradeId              int64   `db:"member_grade_id"`  // 等级id
		KycStatus                  int64   `db:"kyc_status"`       // kyc等级
		GeneralizeTotal            int64   `db:"generalize_total"` // 注册赠送积分
		InviterParentId            int64   `db:"inviter_parent_id"`
		SuperPartner               string  `db:"super_partner"`
		KickFee                    float64 `db:"kick_fee"`
		Power                      float64 `db:"power"`      // 个人矿机算力(每日维护)
		TeamLevel                  int64   `db:"team_level"` // 团队人数(每日维护)
		TeamPower                  float64 `db:"team_power"` // 团队矿机算力(每日维护)
		MemberLevelId              int64   `db:"member_level_id"`
	}
)

func newMemberModel(conn sqlx.SqlConn) *defaultMemberModel {
	return &defaultMemberModel{
		conn:  conn,
		table: "`member`",
	}
}

func (m *defaultMemberModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMemberModel) FindOne(ctx context.Context, id int64) (*Member, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", memberRows, m.table)
	var resp Member
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberModel) GetTotal(ctx context.Context, where string) (int64, error) {
	var total int64
	var err error
	if len(where) == 0 {
		query := fmt.Sprintf("select count(1) from %s ", m.table)
		err = m.conn.QueryRow(&total, query)
	} else {
		query := fmt.Sprintf("select count(1) from %s where %s", m.table, where)
		err = m.conn.QueryRow(&total, query)
	}
	if err != nil {
		return total, err
	}
	return total, nil
}

func (m *defaultMemberModel) FindMembers(ctx context.Context, where string, Page, PageSize int64) ([]*Member, error) {
	var resp []*Member
	var err error
	offset := (Page - 1) * PageSize
	if len(where) == 0 {
		query := fmt.Sprintf("select %s from %s order by id desc limit ?,?", memberRows, m.table)
		err = m.conn.QueryRowsCtx(ctx, &resp, query, offset, PageSize)
	} else {
		query := fmt.Sprintf("select %s from %s where %s order by id desc limit ?,?", memberRows, m.table, where)
		err = m.conn.QueryRowsCtx(ctx, &resp, query, offset, PageSize)
	}
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberModel) FindOneByMobilePhone(ctx context.Context, mobilePhone string) (*Member, error) {
	var resp Member
	query := fmt.Sprintf("select %s from %s where `mobile_phone` = ? limit 1", memberRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, mobilePhone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberModel) FindOneByUsername(ctx context.Context, username string) (*Member, error) {
	var resp Member
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", memberRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberModel) Insert(ctx context.Context, data *Member) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, memberRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AliNo, data.QrCodeUrl, data.AppealSuccessTimes, data.AppealTimes, data.ApplicationTime, data.Avatar, data.Bank, data.Branch, data.CardNo, data.CertifiedBusinessApplyTime, data.CertifiedBusinessCheckTime, data.CertifiedBusinessStatus, data.ChannelId, data.Email, data.FirstLevel, data.GoogleDate, data.GoogleKey, data.GoogleState, data.IdNumber, data.InviterId, data.IsChannel, data.JyPassword, data.LastLoginTime, data.City, data.Country, data.District, data.Province, data.LoginCount, data.LoginLock, data.Margin, data.MemberLevel, data.MobilePhone, data.Password, data.PromotionCode, data.PublishAdvertise, data.RealName, data.RealNameStatus, data.RegistrationTime, data.Salt, data.SecondLevel, data.SignInAbility, data.Status, data.ThirdLevel, data.Token, data.TokenExpireTime, data.TransactionStatus, data.TransactionTime, data.Transactions, data.Username, data.QrWeCodeUrl, data.Wechat, data.Local, data.Integration, data.MemberGradeId, data.KycStatus, data.GeneralizeTotal, data.InviterParentId, data.SuperPartner, data.KickFee, data.Power, data.TeamLevel, data.TeamPower, data.MemberLevelId)
	return ret, err
}

func (m *defaultMemberModel) Update(ctx context.Context, newData *Member) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, memberRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AliNo, newData.QrCodeUrl, newData.AppealSuccessTimes, newData.AppealTimes, newData.ApplicationTime, newData.Avatar, newData.Bank, newData.Branch, newData.CardNo, newData.CertifiedBusinessApplyTime, newData.CertifiedBusinessCheckTime, newData.CertifiedBusinessStatus, newData.ChannelId, newData.Email, newData.FirstLevel, newData.GoogleDate, newData.GoogleKey, newData.GoogleState, newData.IdNumber, newData.InviterId, newData.IsChannel, newData.JyPassword, newData.LastLoginTime, newData.City, newData.Country, newData.District, newData.Province, newData.LoginCount, newData.LoginLock, newData.Margin, newData.MemberLevel, newData.MobilePhone, newData.Password, newData.PromotionCode, newData.PublishAdvertise, newData.RealName, newData.RealNameStatus, newData.RegistrationTime, newData.Salt, newData.SecondLevel, newData.SignInAbility, newData.Status, newData.ThirdLevel, newData.Token, newData.TokenExpireTime, newData.TransactionStatus, newData.TransactionTime, newData.Transactions, newData.Username, newData.QrWeCodeUrl, newData.Wechat, newData.Local, newData.Integration, newData.MemberGradeId, newData.KycStatus, newData.GeneralizeTotal, newData.InviterParentId, newData.SuperPartner, newData.KickFee, newData.Power, newData.TeamLevel, newData.TeamPower, newData.MemberLevelId, newData.Id)
	return err
}

func (m *defaultMemberModel) tableName() string {
	return m.table
}
